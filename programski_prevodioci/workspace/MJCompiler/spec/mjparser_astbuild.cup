package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, VOID, CONST, NEW, READ;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL;
terminal INC, DEC, SEMI, COMMA;
terminal LPARENT, RPARENT, RBRACKET, LBRACKET, LBRACE, RBRACE;
terminal ENUM, DOT;

terminal RETURN;

terminal String IDENT ;
terminal Integer NUM_CONST ;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;


nonterminal Program Program;
nonterminal Declarations Declarations;
nonterminal DeclarationList DeclarationList;

nonterminal  TypeConst TypeConst;
nonterminal ConstDecl ConstDecl;
nonterminal ConstElem ConstElem;
nonterminal SingleConstElem SingleConstElem;
nonterminal GlobVarDecl GlobVarDecl;
nonterminal GlobVarElem GlobVarElem;
nonterminal GlobSingleVarElem GlobSingleVarElem;
nonterminal EnumDecl EnumDecl;
nonterminal  EnumElem EnumElem;
nonterminal EnumSingleElem EnumSingleElem;

nonterminal  MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal FormParam FormParam;
nonterminal VarDeclList VarDeclList;
nonterminal StmtList StmtList;
nonterminal Stmt Stmt; 
nonterminal DesignatorStmt DesignatorStmt;
nonterminal Designator Designator;
nonterminal DesignatorIdentity DesignatorIdentity;
nonterminal Expr Expr;
nonterminal EnumIdent EnumIdent;
nonterminal EnumValue EnumValue;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal Addop Addop;
nonterminal Mullop Mullop;

nonterminal ProgName ProgName;


//nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
//nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

Program ::= (Program) PROG ProgName:P1 Declarations:decl LBRACE MethodDeclList:methodDec RBRACE {: RESULT=new Program(P1, decl, methodDec); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Declarations ::= (Declarations1) Declarations:D1 DeclarationList:D2 {: RESULT=new Declarations1(D1, D2); RESULT.setLine(D1left); :}
				|(NoDeclarations) {: RESULT=new NoDeclarations(); :} /*epsilon*/
				;

DeclarationList ::= (DeclarationsConstDecl) ConstDecl:C1 {: RESULT=new DeclarationsConstDecl(C1); RESULT.setLine(C1left); :} 
				 | (DeclarationsGlobVarDecl) GlobVarDecl:G1 {: RESULT=new DeclarationsGlobVarDecl(G1); RESULT.setLine(G1left); :}
				 | (DeclarationsEnumDecl)EnumDecl:E1 {: RESULT=new DeclarationsEnumDecl(E1); RESULT.setLine(E1left); :}
				 ;
				 
ConstDecl::= (ConstDeclaration)CONST IDENT:constType ConstElem:C1 SEMI {: RESULT=new ConstDeclaration(constType, C1); RESULT.setLine(constTypeleft); :};


ConstElem ::= (SingleConstElemDecl)SingleConstElem:S1 {: RESULT=new SingleConstElemDecl(S1); RESULT.setLine(S1left); :}
			 | (ManyConstElemDecl)ConstElem:C1 COMMA SingleConstElem:S2 {: RESULT=new ManyConstElemDecl(C1, S2); RESULT.setLine(C1left); :}
			 ;
			
SingleConstElem ::= (SingleConstElem)IDENT:constName EQUAL TypeConst:T1 {: RESULT=new SingleConstElem(constName, T1); RESULT.setLine(constNameleft); :};



TypeConst ::= (NumberConst)NUM_CONST :value {: RESULT=new NumberConst(value); RESULT.setLine(valueleft); :}
			 | (BooleanConst)BOOL_CONST:value {: RESULT=new BooleanConst(value); RESULT.setLine(valueleft); :}
			 | (CharacterConst)CHAR_CONST:value {: RESULT=new CharacterConst(value); RESULT.setLine(valueleft); :}
			 ;
			 
GlobVarDecl ::= (GlobVarDecl) IDENT:varType GlobVarElem:G1 SEMI {: RESULT=new GlobVarDecl(varType, G1); RESULT.setLine(varTypeleft); :};


GlobVarElem ::= (GlobSingleVarElement) GlobSingleVarElem:G1 {: RESULT=new GlobSingleVarElement(G1); RESULT.setLine(G1left); :}
			  | (ManyGlobVarElements)GlobVarElem:G1 COMMA GlobSingleVarElem:G2 {: RESULT=new ManyGlobVarElements(G1, G2); RESULT.setLine(G1left); :}
			  ;

GlobSingleVarElem ::= (GlobVarSingleDefWithoutBracket)IDENT:varName {: RESULT=new GlobVarSingleDefWithoutBracket(varName); RESULT.setLine(varNameleft); :}
				 | (GlobVarSingleDefWithBracket)IDENT:varName LBRACKET RBRACKET {: RESULT=new GlobVarSingleDefWithBracket(varName); RESULT.setLine(varNameleft); :}
				 ;

EnumDecl ::=(EnumDecl) ENUM IDENT:enumDeclName LBRACE EnumElem:E1 RBRACE {: RESULT=new EnumDecl(enumDeclName, E1); RESULT.setLine(enumDeclNameleft); :};


EnumElem ::=(EnumSingleElement) EnumSingleElem:E1 {: RESULT=new EnumSingleElement(E1); RESULT.setLine(E1left); :}
		   | (EnumManyElements)EnumElem:E1 COMMA EnumSingleElem:E2 {: RESULT=new EnumManyElements(E1, E2); RESULT.setLine(E1left); :}
		   ;
		   
EnumSingleElem ::= (EnumSingleDefDefault)IDENT:enumName {: RESULT=new EnumSingleDefDefault(enumName); RESULT.setLine(enumNameleft); :}
				 | (EnumSingleDef)IDENT:enumName EQUAL NUM_CONST:N1 {: RESULT=new EnumSingleDef(enumName, N1); RESULT.setLine(enumNameleft); :}
				 ;  			 

MethodDeclList ::= (MethodDeclList1)MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclList1(M1, M2); RESULT.setLine(M1left); :}
				 |(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /*epsilon*/
				  ;	
				   
MethodDecl ::= (MethodDeclWithFormPars) IDENT :retType IDENT:methodName LPARENT FormPars:F1 RPARENT VarDeclList:V2 LBRACE StmtList:S3 RBRACE {: RESULT=new MethodDeclWithFormPars(retType, methodName, F1, V2, S3); RESULT.setLine(retTypeleft); :}
			|(MethodDeclVoidWithFormPars) VOID:retType IDENT:methodName LPARENT FormPars:F1 RPARENT VarDeclList:V2 LBRACE StmtList:S3 RBRACE {: RESULT=new MethodDeclVoidWithFormPars(methodName, F1, V2, S3); RESULT.setLine(methodNameleft); :}
			 | (MethodDeclWithoutFormPars)IDENT :retType IDENT:I1 LPARENT RPARENT VarDeclList:V2 LBRACE StmtList:S3 RBRACE {: RESULT=new MethodDeclWithoutFormPars(retType, I1, V2, S3); RESULT.setLine(retTypeleft); :}
			 | (MethodDeclVoidWithoutFormPars)VOID:retType IDENT:I1 LPARENT RPARENT VarDeclList:V2 LBRACE StmtList:S3 RBRACE {: RESULT=new MethodDeclVoidWithoutFormPars(I1, V2, S3); RESULT.setLine(I1left); :}
			 ;

				  
FormPars ::= (FormalParameterOne) FormParam:F1 {: RESULT=new FormalParameterOne(F1); RESULT.setLine(F1left); :}
		    | (FormalParametersMany) FormPars:F1 COMMA FormParam:F2 {: RESULT=new FormalParametersMany(F1, F2); RESULT.setLine(F1left); :}
		    ;

FormParam ::= (FormalParamDef)IDENT:typeName IDENT:I1 {: RESULT=new FormalParamDef(typeName, I1); RESULT.setLine(typeNameleft); :}
			| (FormalParamArrayDef)IDENT:typeName IDENT:I1 LBRACKET RBRACKET {: RESULT=new FormalParamArrayDef(typeName, I1); RESULT.setLine(typeNameleft); :}
			;

VarDeclList ::= (VarDeclarationList) GlobVarDecl:G1 {: RESULT=new VarDeclarationList(G1); RESULT.setLine(G1left); :} 
			| (NoVarDeclarationList) {: RESULT=new NoVarDeclarationList(); :}/*epsilon*/
			;
		

StmtList ::= (Statements)StmtList:S1 Stmt:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
		   | (NoStatements) {: RESULT=new NoStatements(); :}/*epsilon*/
		   ;

Stmt ::=(Assignment) DesignatorStmt:D1 SEMI {: RESULT=new Assignment(D1); RESULT.setLine(D1left); :}
		| (ReadStatement)READ LPARENT Designator:D1 RPARENT SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
		| (PrintStatementTwoArg)PRINT LPARENT Expr:E1 RPARENT SEMI {: RESULT=new PrintStatementTwoArg(E1); RESULT.setLine(E1left); :} 
		| (PrintStatementOneArg)PRINT LPARENT Expr:E1 COMMA NUM_CONST:N2 RPARENT SEMI {: RESULT=new PrintStatementOneArg(E1, N2); RESULT.setLine(E1left); :}
		;

DesignatorStmt ::= (DesignatorStmtAssign)Designator:dest EQUAL Expr:e {: RESULT=new DesignatorStmtAssign(dest, e); RESULT.setLine(destleft); :}
				 | (DesignatorStmtINC)Designator:D1 INC {: RESULT=new DesignatorStmtINC(D1); RESULT.setLine(D1left); :}
				 | (DesignatorStmtDEc)Designator:D1 DEC {: RESULT=new DesignatorStmtDEc(D1); RESULT.setLine(D1left); :}
				 ;
				 
Designator ::= (DesignatorSingle) IDENT:name {: RESULT=new DesignatorSingle(name); RESULT.setLine(nameleft); :}
			 |	(DesinatorWithDOT)EnumIdent:E1 DOT EnumValue:E2 {: RESULT=new DesinatorWithDOT(E1, E2); RESULT.setLine(E1left); :} 
			 | 	(DesignatorWithExpr)DesignatorIdentity:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorWithExpr(D1, E2); RESULT.setLine(D1left); :}
			 ;		
			 
DesignatorIdentity ::= (DesignatorName) IDENT:designatorName {: RESULT=new DesignatorName(designatorName); RESULT.setLine(designatorNameleft); :};			 
			 
EnumIdent ::= (EnumIdentity)IDENT:identity {: RESULT=new EnumIdentity(identity); RESULT.setLine(identityleft); :};

EnumValue ::= (EnumValue)IDENT:identity {: RESULT=new EnumValue(identity); RESULT.setLine(identityleft); :};			 
	
Expr ::=	(ExprTerm)Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
			|
			(ExprMinusTerm)MINUS Term:T1 {: RESULT=new ExprMinusTerm(T1); RESULT.setLine(T1left); :}
			|
			(ExprList)Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprList(E1, A2, T3); RESULT.setLine(E1left); :}
			;

Term ::= (TermSingleFactor) Factor:F1 {: RESULT=new TermSingleFactor(F1); RESULT.setLine(F1left); :} 
		| (TermManyFactors)Term:T1 Mullop:M2 Factor:F3 {: RESULT=new TermManyFactors(T1, M2, F3); RESULT.setLine(T1left); :}
		;

Factor ::= (FactorConst)TypeConst:T1 {: RESULT=new FactorConst(T1); RESULT.setLine(T1left); :}
		 | (FactorNewArray)NEW IDENT:I1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewArray(I1, E2); RESULT.setLine(I1left); :}
		 | (FactorNew)NEW IDENT:I1 {: RESULT=new FactorNew(I1); RESULT.setLine(I1left); :}
		 | (FactorRegularExpr)LPARENT Expr:E1 RPARENT {: RESULT=new FactorRegularExpr(E1); RESULT.setLine(E1left); :}
		 ;
		 

Addop ::= (AddOperationPlus)PLUS {: RESULT=new AddOperationPlus(); :}
		| (AddOperationMinus)MINUS {: RESULT=new AddOperationMinus(); :}
		;
		
Mullop ::=(MultiplyOpTimes) MUL {: RESULT=new MultiplyOpTimes(); :}
		 | (MultiplyOpDivide)DIV {: RESULT=new MultiplyOpDivide(); :}
		 | (MultiplyOpMod)MOD {: RESULT=new MultiplyOpMod(); :}
		 ;

				 