package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, CONST, NEW, READ;
terminal PLUS, MINUS, MUL, DIV, MOD, IS_EQ, IS_NOT_EQ, EQUAL;
terminal LARGER, LARGER_OR_EQ, LESSER, LESSER_OR_EQ;
terminal AND, OR, INC, DEC, SEMI, COMMA;
terminal LPARENT, RPARENT, RBRACKET, LBRACKET, LBRACE, RBRACE;
terminal IF, ELSE;
terminal ENUM, DOT;

terminal String IDENT ;
terminal Integer NUM_CONST ;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;


nonterminal Program, Declarations, DeclarationList;

nonterminal Type, TypeConst;
nonterminal ConstDecl, ConstType, ConstElem, SingleConstElem, SingleConstName;
nonterminal GlobVarDecl, GlobVarElem, GlobVarType, GlobSingleVarElem;
nonterminal EnumDecl,EnumType,  EnumElem, EnumSingleElem;

nonterminal OptionMethodDecl, MethodDeclList, MethodDecl, MethodTypeName;
nonterminal FormPars, FormParam;
nonterminal VarDeclList;
nonterminal StmtList, Stmt; 
nonterminal DesignatorStmt, Designator, DesignatorIdentity;
nonterminal Expr;
nonterminal EnumIdent, EnumValue;
nonterminal Term, Factor;
nonterminal Addop, Mullop;




//nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
//nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

Program ::= (Program) PROG IDENT Declarations LBRACE OptionMethodDecl RBRACE;

Declarations ::= (Declarations) Declarations DeclarationList
				|(NoDeclarations) /*epsilon*/
				;

DeclarationList ::= ConstDecl 
				 | GlobVarDecl
				 | EnumDecl
				 ;
				 
ConstDecl::= CONST ConstType ConstElem SEMI;

ConstType ::= Type;

ConstElem ::= SingleConstElem
			 | ConstElem COMMA SingleConstElem
			 ;
			
SingleConstElem ::= SingleConstName EQUAL TypeConst;

SingleConstName ::= Type;

Type ::= IDENT;

TypeConst ::= NUM_CONST
			 | BOOL_CONST
			 | CHAR_CONST
			 ;
			 
GlobVarDecl ::= GlobVarType GlobVarElem SEMI;

GlobVarType ::= Type;

GlobVarElem ::= GlobSingleVarElem
			  | GlobVarElem COMMA GlobSingleVarElem
			  ;

GlobSingleVarElem ::= IDENT
				 | IDENT LBRACKET RBRACKET
				 ;

EnumDecl ::= ENUM EnumType LBRACE EnumElem RBRACE;

EnumType ::= Type;

EnumElem ::= EnumSingleElem
		   | EnumElem COMMA EnumSingleElem
		   ;
		   
EnumSingleElem ::= IDENT
				 | IDENT EQUAL NUM_CONST
				 ;  			 

OptionMethodDecl ::= MethodDeclList
				   | /*epsilon*/
				   ;
	
MethodDeclList ::= MethodDecl
				  | MethodDeclList MethodDecl
				  ;	
				   
MethodDecl ::= MethodTypeName IDENT LPARENT FormPars RPARENT VarDeclList LBRACE StmtList RBRACE
			 | MethodTypeName IDENT LPARENT RPARENT VarDecl LBRACE StmtList RBRACE
			 ;
			 
MethodTypeName ::= Type
				  | VOID
				  ;
				  
FormPars ::= FormParam
		    | FormPars COMMA FormParam
		    ;

FormParam ::= Type IDENT
			| Type IDENT LBRACKET RBRACKET
			;

VarDeclList ::= VarDeclList GlobVarDecl 
			| /*epsilon*/
			;
		

StmtList ::= StmtList Stmt
		   | /*epsilon*/
		   ;

Stmt ::= DesignatorStmt SEMI
		| READ LPARENT Designator RPARENT SEMI
		| PRINT LPARENT Expr RPARENT SEMI 
		| PRINT LPARENT Expr COMMA NUM_CONST RPARENT SEMI
		;

DesignatorStmt ::= Designator EQUAL Expr
				 | Designator INC
				 | Designator DEC
				 ;
				 
Designator ::= (DesignatorIdent) IDENT
			 |	EnumIdent DOT EnumValue 
			 | 	DesignatorIdentity LBRACKET Expr RBRACKET
			 ;		
			 
DesignatorIdentity ::= IDENT;			 
			 
EnumIdent ::= IDENT;

EnumValue ::= IDENT;			 
	
Expr ::=	Term
			|
			MINUS Term
			|
			Expr Addop Term
			;

Term ::= Factor 
		| Term Mullop Factor
		;

Factor ::= TypeConst
		 | NEW IDENT LBRACKET Expr RBRACKET
		 | NEW IDENT
		 | LPARENT Expr RPARENT
		 ;
		 

Addop ::= PLUS
		| MINUS
		;
		
Mullop ::= MUL
		 | DIV
		 | MOD
		 ;

				 